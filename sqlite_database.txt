https://www.py4e.com/lectures3/Pythonlearn-15-Database-Handout.txt

- Check the handouts in the above url


Python for Everybody Database Handout

https://www.py4e.com/lectures3/Pythonlearn-15-Database-Handout.txt

Download and Install: http://sqlitebrowser.org/

Single Table SQL

CREATE TABLE "Users" ("name" TEXT, "email" TEXT)

INSERT INTO Users (name, email) VALUES ('Chuck', 'csev@umich.edu')
INSERT INTO Users (name, email) VALUES ('Colleen', 'cvl@umich.edu')
INSERT INTO Users (name, email) VALUES ('Ted', 'ted@umich.edu')
INSERT INTO Users (name, email) VALUES ('Sally', 'a1@umich.edu')
INSERT INTO Users (name, email) VALUES ('Ted', 'ted@umich.edu')
INSERT INTO Users (name, email) VALUES ('Kristen', 'kf@umich.edu')

DELETE FROM Users WHERE email='ted@umich.edu'

UPDATE Users SET name="Charles" WHERE email='csev@umich.edu'

SELECT * FROM Users

SELECT * FROM Users WHERE email='csev@umich.edu'

SELECT * FROM Users ORDER BY email

SELECT * FROM Users ORDER BY name DESC

Multi-Table SQL:

CREATE TABLE "Artist" (
    "id" INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL UNIQUE, 
    "name" TEXT)

CREATE TABLE "Album" (
    "id" INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL UNIQUE, 
    artist_id INTEGER,
    "title" TEXT)

CREATE TABLE "Genre" (
    "id" INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL UNIQUE, 
    "name" TEXT)

CREATE TABLE "Track" (
    "id" INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL UNIQUE, 
    album_id INTEGER, genre_id INTEGER, len INTEGER, rating INTEGER, 
    "title" TEXT, "count" INTEGER)

INSERT INTO Artist (name) VALUES ('Led Zepplin')
INSERT INTO Artist (name) VALUES ('AC/DC')

INSERT INTO Genre (name) VALUES ('Rock') ;
INSERT INTO Genre (name) VALUES ('Metal');

INSERT INTO Album (title, artist_id) VALUES ('Who Made Who', 2);
INSERT INTO Album (title, artist_id) VALUES ('IV', 1);

INSERT INTO Track (title, rating, len, count, album_id, genre_id) 
    VALUES ('Black Dog', 5, 297, 0, 2, 1) ;
INSERT INTO Track (title, rating, len, count, album_id, genre_id) 
    VALUES ('Stairway', 5, 482, 0, 2, 1) ;
INSERT INTO Track (title, rating, len, count, album_id, genre_id) 
    VALUES ('About to Rock', 5, 313, 0, 1, 2) ;
INSERT INTO Track (title, rating, len, count, album_id, genre_id) 
    VALUES ('Who Made Who', 5, 207, 0, 1, 2) ;

SELECT Album.title, Artist.name FROM Album JOIN Artist 
    ON Album.artist_id = Artist.id

SELECT Album.title, Album.artist_id, Artist.id, Artist.name 
    FROM Album JOIN Artist ON Album.artist_id = Artist.id

SELECT Track.title, Track.genre_id, Genre.id, Genre.name 
    FROM Track JOIN Genre   

SELECT Track.title, Genre.name FROM Track JOIN Genre 
    ON Track.genre_id = Genre.id

SELECT Track.title, Artist.name, Album.title, Genre.name 
FROM Track JOIN Genre JOIN Album JOIN Artist 
    ON Track.genre_id = Genre.id AND Track.album_id = Album.id 
    AND Album.artist_id = Artist.id
 

Many-Many Relationship

CREATE TABLE User (
    id     INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT UNIQUE,
    name   TEXT UNIQUE,
    email  TEXT
) ;

CREATE TABLE Course (
    id     INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT UNIQUE,
    title  TEXT UNIQUE
) ;

CREATE TABLE Member (
    user_id     INTEGER,
    course_id   INTEGER,
	role        INTEGER,
    PRIMARY KEY (user_id, course_id)
) ;

INSERT INTO User (name, email) VALUES ('Jane', 'jane@tsugi.org');
INSERT INTO User (name, email) VALUES ('Ed', 'ed@tsugi.org');
INSERT INTO User (name, email) VALUES ('Sue', 'sue@tsugi.org');

INSERT INTO Course (title) VALUES ('Python');
INSERT INTO Course (title) VALUES ('SQL');
INSERT INTO Course (title) VALUES ('PHP');

INSERT INTO Member (user_id, course_id, role) VALUES (1, 1, 1);
INSERT INTO Member (user_id, course_id, role) VALUES (2, 1, 0);    
INSERT INTO Member (user_id, course_id, role) VALUES (3, 1, 0);

INSERT INTO Member (user_id, course_id, role) VALUES (1, 2, 0);
INSERT INTO Member (user_id, course_id, role) VALUES (2, 2, 1);

INSERT INTO Member (user_id, course_id, role) VALUES (2, 3, 1);
INSERT INTO Member (user_id, course_id, role) VALUES (3, 3, 0);

SELECT User.name, Member.role, Course.title
  FROM User JOIN Member JOIN Course
  ON Member.user_id = User.id AND Member.course_id = Course.id
  ORDER BY Course.title, Member.role DESC, User.name






  ----------------
  my notes

  Relational Database
  Example of a Music Management Application
  Database is as below 

  Track   Len   Artist  Album  Genre  Rating count


  ---Its a basic rule that vertically no string should be repeated. If that is done than - create a different table to avoid duplication of Data
  -- To find relations .. first think and decide.. WHAT IS THE MAIN TABLE or Info that entire database is based on.. like users tracks albums etc.
  --- Here its Track so we create a separate table of Track with basic attribuites like here its length , Rating, and count - no strings its numbers
  --- Now the Repeated data is Artist, Album , Genre  etc.
 - So we are creating separate for that..
 -- the way to think is... What we can get out of Track  - we can say..
      - Track belongs to Album
      - Artis belongs to Album
      - Genre belongs to Track (can be different but here we are just guesing)and taking.

So total 4 Tables to be created 
   1  Track Len Rating count
   2  Album
   3  Artist
   4  Genre

== THis is how its planned and the above is the way to think about.. Can check the video in FCC.



=== The below is about basics of DATABASE NORMALISATION

-- DO NOT DUPLICATE or Repeat the string data.. Instead use those keys or INTEGER and to point to one raw to another

--so as a result will add special key column to those keys or id on the another one

here.. in this example 
we want to keep track of which band is the "creator" of each music track?
What album does this song "belong to"?
Which album is this song related to ???

we have to create this relationships.
we have to come up this ways to store those relationships

Interger Reference Patterns

We use integers to reference rows in another table. Check the example below
there are basically 3 kind of keys Primary key(generally an integer auto increament field) , Logical Key(what the outside world uses for looku, text area that we use to lookup), Foreign Key(generally an integer key pointing to a row in another Table  -- basically pointing to a primary key of another row)

Artist Table
id(primary_key)     name
1                   Led Zepplin
2                   AC/DC

Album Table
id      artist_id    title  
1       2            Who made Who  #we reference this when we want to say Who made Who was done by AC/DC so we made 2 there - Difference here is instead of saying AC/DC -- We use integers
2       1            IV


BEST RULES OR PRACTICES
= Never use your logical key as the primary key 
= Logical keys can and do change, albeit slowly
= Relationships that are based on matching string fields are less efficient than integers

== JOINING TABLES -- to display Two cloumns from different table.
   - make sure you join the table and     SELECT Album.title, Artist.name FROM Album JOIN Artist ON Album.artist_id = Artist.id
   - Here we have to say to sql that...   
     1. What we want to see(data)?        SELECT Album.title, Artist.name
     2. The Tables that hold the data?    FROM Album JOIN Artist ON
     3. How the tables are linked?        Album.artist_id = Artist.id

 To check how it happens .. Just use this code and see how the entire tables Join ON  artist_id and id of Artist table
                    SELECT Album.title,Album.artist_id,Artist.id, Artist.name FROM Album JOIN Artist ON Album.artist_id = Artist.id    #we are adding two more things the ids of those table so that we know entirely how are joined on primary and Foreign key

AND here if we dont USE ON clause and use just JOIN tables.. -- Then we will get all possible combinations ...
   -- We ON we tell sql that.. show only those data that matches.. -- That will tell track belongs to which album.
   You can check without ON.
                 SELECT Album.title,Album.artist_id,Artist.id, Artist.name FROM Album JOIN Artist   #this will list all possible combinations of the two tables.. But we just want matching records.. Hense we join the table with the id tat are matching and that way only we can get the matching data.

Complex .. to list  data from 4 tables.

SELECT Track.title, Album.title, Artist.name, Genre.name FROM Track JOIN Album JOIN Artist JOIN Genre ON Track.album_id = Album.id AND Track.genre_id = Genre.id AND Album.artist_id =Artist.id


========================
THE ABOVE ALL EXAMPLES WERE OF ONE - MANY Relationship
Relational Databases: Many-to-many Relationships
-- Many to One OR one to Many meas... Check both the table.. Think .. Many rows are linked to one Row of Another.. THats why its called -- MANY TO ONE

there are times when we can not define relationships -- with the above way or many to one or one to many.
SO WE HAVE TO USE MANY TO MANY Relationships

for example -- mother to children  (many to one)

BUT there are cases when its many to many relationships Like Books to Authors and Authors to Books. 
                                        - SO ONE BOOK HAS MANY AUTHORS and EACH AUTHOR has MANU BOOKS
SO its many to many

So there is no one.. there....

SO TO SOLVE THIS PROBLEM.,.. WE HAVE TO Built a table.. - called Connecter table or also called junction table.

COnnecter table is like ...   connected to both the tables.. for example

Two tables called -- Books and Authors.
Here to use this as join Or to get the info or data out of it .. WE HAVE TO create a table that connects both the table. and creates.. Many to one to Books and Many to One to Authors.
Connector tables creates that Manyness in between

Book Table(one)
    id    name
Connecter Table or Book_Author Table (Many)
    id    book_id(many)     author_id(many)
Author Table(one)
    id    name

ITS LIKE       Book Table(one)  (One To   Many)  Connect TAble (Many   to One)  Author Table(one)


Another example.

Course Table    (Member of Many to Many)         User Table

the below way we create that relationships

Course_table(One)                  Member_table(many)              User_table(One)
id                                  user_id                         id
title                               course_id                       name
                                                                    email

So in short the connect table creates Many to one relationship To each table.

 Member_table/Connecter_table(MANY) AND Course_table(ONE) (MANY TO ONE)
 Mmeber_table/Connecter_table(MANY) AND User_Table (ONE)  (MANY TO ONE)

IN the connecter Table -- We always put Foreign Key.. NeVER put PRimary Keys in it.

        - THE COMBINATION OF Foreign IDs Has to be UNIQUE   and Always UNIQUE  -- like (1,2) (1,3)  (2,3) etc.

CREATING IT .. in Database.


CREATE TABLE User (
    id     INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT UNIQUE,
    name   TEXT UNIQUE,
    email  TEXT
) ;

CREATE TABLE Course (
    id     INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT UNIQUE,
    title  TEXT UNIQUE
) ;

CREATE TABLE Member (
    user_id     INTEGER,                          #Foreign Key
    course_id   INTEGER,                          #Foreign Key
	role        INTEGER,                            
    PRIMARY KEY (user_id, course_id)              #This will be a primary key of this table.... Where its says the combination of both should be UNIQUE -- Thats how it will store less data and easy for sql to scan the data and combination. and That's why we are adding this.
) ;


INSERT INTO User (name, email) VALUES ('Jane', 'jane@tsugi.org');
INSERT INTO User (name, email) VALUES ('Ed', 'ed@tsugi.org');
INSERT INTO User (name, email) VALUES ('Sue', 'sue@tsugi.org');

INSERT INTO Course (title) VALUES ('Python');
INSERT INTO Course (title) VALUES ('SQL');
INSERT INTO Course (title) VALUES ('PHP');

INSERT INTO Member (user_id, course_id, role) VALUES (1, 1, 1);    #here role  0 is for student and 1 for instructor
INSERT INTO Member (user_id, course_id, role) VALUES (2, 1, 0);    
INSERT INTO Member (user_id, course_id, role) VALUES (3, 1, 0);

INSERT INTO Member (user_id, course_id, role) VALUES (1, 2, 0);
INSERT INTO Member (user_id, course_id, role) VALUES (2, 2, 1);

INSERT INTO Member (user_id, course_id, role) VALUES (2, 3, 1);
INSERT INTO Member (user_id, course_id, role) VALUES (3, 3, 0);





























