
git config --global user.name "coder7874"   //to configure username in the github
git config --global user.email "gopani7874@gmail.com" //to configur email in the github
git config --list  //to check what all configuration is there right now - it lists all the current configuration
    //to check where these lists or configuration file is save in your pc - GO TO HOME DIRECTORY and USE THIS COMMAND
    //.gitconfig file - you can open that and check all the configuration that we have done
git clone https://github.com/coder7874/mypython.git   //to clone the repository
---------------
After creating file in the folder -- to commit changes - check the status first.

git status  //to check the status of the repositories
git add file_name //to add the file in git and so that future changes can be committed.
git status //again check if added and will be green

git commit -m "First Commit"  OR git commit -m "First commit" file_name(if particular file) //to commit   and -m is to provide comment
                //Commit does not mean it will be in your git account
                //you have to push the code
git push -u origin master/branchname   //to push all the commited files

Git Push with Access Token   - git push https://<GITHUB_ACCESS_TOKEN>@github.com/<GITHUB_USERNAME>/<REPOSITORY_NAME>.git
    git push https://<Access Token>@github.com/coder7874/mypython.git


-- New Git Github Tutotial from Freecodecamp


. means include all the untracked files -- so that dont have to write any specific file
-m means message

git commit -m "added index.html" -m "home page code including button. More updates will be there as we go ahead"   
here the first -m is for the title and second -m is for decription 

git clone andlink #to clone the project from the remote repositories
git add . or file name
git commit -m titla -m description   #saving the code or commiting the code locally  - its not live on github 
git push    #pushing all the commits or saved in your local to Remote Repository on git hub where my project is hosted


SSH Keys - To push code you have to prove to the github that you are the owner of the account and for that we use SSH Keys

 start by generating a key locally

    ssh-keygen command
    ssh-keygen -t(type of encryption) rsa -b(stregnth of encryption) 4096 -C "github email address"

    ssh-keygen -t rsa -b 4096 -C "gopani7874@gmail.com"  (there is a defualt location for file /Users/??/.ssh/id_rsa) can enter change the file name
            it will ask for the file_name
            it will ask for passphrase - can leave blank
            then your key gets generated

    you can search for the key with ls | grep testkey command

        there are two keys one is private - should not be seen by others  - This is the key that we have to keep secure on our local machine
        the another is public with .pub extention - its okay if other sees this -- and this will be uploaded to your git account as well

   - now here we use our private key to show to the github, that we are the owner of the account
    - and you are the one that has generated this .pub key... SO its a proof - And public key can only be generated by Private key.

    - you can print out your public key with   cat keyname  
    -  now copy that in your account on Github
    - add ssh command may find that in the github how to add that.


git push origin master  # origin is option set for us here.. is  the location for our git repositories 
                        #master is the branch that we want to push the code to


-----------------------
Now what if we want to push the code from local machine to the remote one -- We want to do that in the new repositories

go into the folder that is locally with command cd
Now its not the git repository that you can check if there is any .git hidden folder - there is no 

now use the command  --

            git init    (it means initializing git repositories in the current folder)

            git status (you can check all your files are NOT YET Tracked by Git , so we have to add those files by git add .)
            git add . or the name of file
            git status - to check if the files are now tracked by git
            git commit -m "created README or whatenver title" -m "any description you like its optional"
            
ERROR FATAL git push origin master      - here we will get an ERROR while making it live BECAUSE there is no such Git Repository AS WE HAVE CREATED THIS locally
                #so here git is saying where should i push the code as there is no repository of this name on the github

             1st way is  TO CREATE an empty repository on github
                After creating copy that SSH url from Github and do the below
            
            git remote add origin paste_that_link_of_newRepository_that_wecopied  #remote means not in this computer but somewhere else or on git and add 
                    #the above we are using to connect our new repository or We are not yet connected to repository
                    #So now we are connected to the new repository that we have created
            #to CHECK the connected repositories to our machine type below command
            git remote -v 

            #now we can push and wont have FATAL ERRORS
            git push origin master - code pushed to the repositories
            #every time if we dont want to write origin master than we can set the default push by setting Upstream
            git push -u origin master   #here now in future we will not have to type origin master - by Default it will push to that code

Git BRANCHING
 
   - Master branch (main branch) - its just a naming convention for master or main branch
   #creating new branch 
   - Feature branch  
        - initially code on master and feature branch will be the same -- it will be the snapshot of ther master branch initially
        - as we make updates to the feature branch that will be seen only in Feature branch
   #creating another branch called hot fix branch - from master
        - to fix the urgent fix and then we merge it into master branch
   Then again we will merge the feature branch into master as we feel now its all good and tested 

git branch    - will list all the branches and tell which is my current branch

git checkout  - to switch between branches 

git checkout -b  new_branch_name        #to swith and -b is to tell git to create a new branch and followed by name of the branch - If working in multiple branches and teams then make the name as descriptive as possible
                        #some people name the branch  like feature-11-something   , here 11 is the issue number or some identification number so that team members can understand easily

    now you can check git branch again --- and list the branch and know which branch you are currently on
    now you can again go back to master by below code and now 
git checkout master  #dont have to mention -b as we are not creating new branch here.. we are just switching the branch

git checkout new_branch_name  #here you make changes and save it and commit the code - ITS SAVED TO new_branch_name only. its not there in the master

after commiting the code  if you want to check the differece between the master and the current branch .. then..

git diff new_branch_name  #to know what added and what deleted and what is not there in the master
    #with this you will know the changes that are not there in the other branches
    #TO effect those changes you can merge those changes as follow
git merge new_branch_name
    OR intead of merging an ideal thing to do is . Pushing those changes in the current branch and make a PR(pull request) as below
git push -u(--set-upstream) origin new_branch_name #this will push the code to the new_branch_name -- it will not to the master
        #Pull Request is the request to hold your code to the branch
        #here we want our code to be pulled into master branch -SO WE MAKE A PR FROM new_branch_name to master Branch 
        #After we make PR any one can reveiw our code and comment on it and they can ask us to make changes
Then you can go to git hub --- and pull request to be approved whoever has access


Now if there are no coflicts it will be merged after the admin or with permission guy pull the request 

-- Now After the PR merging done what you go back to your editor

There you will notice that master branch there is no code which was pulled.
THe Reason behide that is that ... the code is into github.. but not in local
so we have pull the code here in local as follow

git checkout master #switched to master branch

git pull   #it will get all the code that is there (all the new code.. changes)

now you can check updated code will be there.

#now we are done with the new_branch_name/feature_name  - I am not going to be using that branch again as the feature or task is done.
#Becasue of the above reason we are going to delete that branch - We usually do not use the branch is used and already merged into master branch and done with the purpose
#so to delete the branch do as follow

git branch -d new_branch_name/feature_name/whatever_the_name_of_the_branch    -d is for deletion

git branch  #now you will see you only have master branch

#In real life its not easy to merge the Branch --- THere will be a lot of Merge conflicts  which wont allow you to merge on time.. it takes time
    #because -- there are many developers working on the same branch and . Its very likely that multiple people make changes in the same file.
    #So here Git does not know which code you want to keep and Which code is redundant OR which code you want to get rid of
#if the file is already tracked meanig file is modified 
 git status   #to check if its tracked in git and modified
#here what you can do is... To commit the code YOU DO NOT HAVE TO DO .. GIT ADD . You can directly go for GIT COMMIT 
 git commit -am "added world"      #here -a is for adding and m is for messege.. SO this adds and commits at the same time
#In short FOR MODIFIED FILES we can use -am and can skip the git add part   -a for adding the modified file and m is for message    
    
f










































     












        























